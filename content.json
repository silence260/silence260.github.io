{"meta":{"title":null,"subtitle":null,"description":null,"author":"Wei","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"在info.plist隐私权限的配置","slug":"在info.plist隐私权限的配置","date":"2019-08-15T14:35:03.156Z","updated":"2019-08-15T14:52:12.488Z","comments":true,"path":"2019/08/15/在info.plist隐私权限的配置/","link":"","permalink":"http://yoursite.com/2019/08/15/在info.plist隐私权限的配置/","excerpt":"","text":"权限名称 Key值通讯录 NSContactsUsageDescription麦克风 NSMicrophoneUsageDescription相册 NSPhotoLibraryUsageDescription相机 NSCameraUsageDescription添加图片到相册 NSPhotoLibraryAddUsageDescription持续获取地理位置 NSLocationAlwaysUsageDescription使用时获取地理位置 NSLocationWhenInUseUsageDescription蓝牙 NSBluetoothPeripheralUsageDescription语音转文字 NSSpeechRecognitionUsageDescription日历 NSCalendarsUsageDescription 转载自链接：http://ask.dcloud.net.cn/article/931","categories":[],"tags":[]},{"title":"可用RTMP直播源","slug":"可用RTMP直播源","date":"2019-08-15T14:32:42.344Z","updated":"2019-08-15T14:33:42.981Z","comments":true,"path":"2019/08/15/可用RTMP直播源/","link":"","permalink":"http://yoursite.com/2019/08/15/可用RTMP直播源/","excerpt":"","text":"香港财经,rtmp://202.69.69.180:443/webcast/bshdlive-pc 韩国GoodTV,rtmp://mobliestream.c3tv.com:554/live/goodtv.sdp 韩国朝鲜日报,rtmp://live.chosun.gscdn.com/live/tvchosun1.stream 美国1,rtmp://ns8.indexforce.com/home/mystream 美国2,rtmp://media3.scctv.net/live/scctv_800 美国中文电视,rtmp://media3.sinovision.net:1935/live/livestream 湖南卫视,rtmp://58.200.131.2:1935/livetv/hunantv 转载自链接：https://blog.csdn.net/q386815991/article/details/80942155","categories":[],"tags":[]},{"title":"生成IJKMediaFramework第三方库","slug":"生成IJKMediaFramework第三方库","date":"2019-08-15T12:21:38.721Z","updated":"2019-08-15T14:53:42.077Z","comments":true,"path":"2019/08/15/生成IJKMediaFramework第三方库/","link":"","permalink":"http://yoursite.com/2019/08/15/生成IJKMediaFramework第三方库/","excerpt":"","text":"一、下载ijkplayerhttps://github.com/Bilibili/ijkplayer 二、编译ijkplayer1、打开终端, cd 到jkplayer-master文件夹中, 也就是下载完解压后的文件夹。2、终端执行命令行./init-ios.sh, 这一步是去下载 FFMpeg 的, 时间稍微会久一点。3、在第2步中下载完成后, 终端执行cd ios, 也就是说进入到 ios目录下。4、进入 ios 文件夹后, 在终端依次执行./compile-ffmpeg.sh clean和./compile-ffmpeg.sh all命令, 编译 FFMpeg, 也就是README.md中这两步.编译时间也较久。 三、打包IJKMediaFramework.framework框架1、打开工程IJKMediaPlayer.xcodeproj。2、工程打开后设置工程的 scheme。3、设置好 scheme 后, 分别选择真机和模拟器进行编译,编译又分为http编译和https编译http编译对应ffmpeghttps编译对应openssl 编译openssl, 如果不需要https可以跳过这一步./compile-openssl.sh all编译ffmpeg./compile-ffmpeg.sh all 1) Cmd + b 直接运行，会报错 1234./libavutil/arm/asm.S:50:9: error: unknown directive .arch armv7-a ^make: *** [libavcodec/arm/aacpsdsp_neon.o] Error 1 最新的 Xcode 已经弱化了对 32 位的支持, 解决方法:在 compile-ffmpeg.sh中删除 armv7, 修改如: 1FF_ALL_ARCHS_IOS8_SDK=&quot;arm64 i386 x86_64&quot; 再重新执行出现错误的命令: ./compile-ffmpeg.sh all 2) Cmd + b 直接运行，会报错 avconfig.h 文件找不到，这时候去一下路径找到 avconfig.h 文件，如： 1~/Desktop/ijkplayer-ios/ios/build/universal/include/libavutil 打开 avconfig.h ，注释掉 1include &quot;armv7/avconfig.h&quot; 3）Cmd + b 再运行，又报错 config.h 文件找不到，去 1~/Desktop/ijkplayer-ios/ios/build/universal/include/libffmpeg 中打开 config.h , 同上注释掉 1include &quot;armv7/avconfig.h&quot; 4）Cmd + b 再运行，还报错 1... ld: symbol(s) not found for architecture armv7, 也就是 armv7 不支持，去 1TARGETS ——&gt; IJKMediaFrameworkWithSSL ——&gt; Build Settings ——&gt; Valid Architecutres 中，删掉其中的 armv7、armv7s 编译完成后进入 Finder。4、进入 Finder 后, 可以看到有真机和模拟器两个版本的编译结果。5、合并真机和模拟器版本的 framework。6、使用终端进行合并,打开终端, 先 cd到 Products目录下, 然后执行: lipo -create 真机framework路径 模拟器framework路径 -output 合并的文件路径 1lipo -create Release-iphoneos/IJKMediaFramework.framework/IJKMediaFramework Release-iphonesimulator/IJKMediaFramework.framework/IJKMediaFramework -output IJKMediaFramework 合并完成可以看到这里生成了一个大概两倍大小的文件, 将生成的 IJKMediaFramework文件替换掉 真机framework中的 IJKMediaFramework文件，然后这个替换掉文件的 真机framework就是我们需要的 通用的framework了。 7、IJKMediaFramework.framework文件就是我们需要的框架了, 可以复制粘贴出来, 后期我们需要导入工程使用。 四、iOS工程中集成IJKPlayer新建工程, 导入合并后的IJKMediaFramework.framework 导入的依赖库: 12345678910111213AudioToolbox.frameworkAVFoundation.frameworkCoreGraphics.frameworkCoreMedia.frameworkCoreVideo.frameworklibbz2.tbdlibz.tbdMediaPlayer.frameworkMobileCoreServices.frameworkOpenGLES.frameworkQuartzCore.frameworkUIKit.frameworkVideoToolbox.framework 五、使用 IJKMediaFramework第三方库这里在ViewController.m文件中使用IJKMediaFramework框架进行测试使用 123456789101112131415161718#import &lt;IJKMediaFramework/IJKMediaFramework.h&gt;// 直播视频self.url = [NSURL URLWithString:@&quot;http://live.hkstv.hk.lxdns.com/live/hks/playlist.m3u8&quot;];// self.url = [NSURL URLWithString:@&quot;https://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;];_player = [[IJKFFMoviePlayerController alloc] initWithContentURL:self.url withOptions:nil];UIView *playerView = [self.player view];UIView *displayView = [[UIView alloc] initWithFrame:self.view.bounds];self.playerView = displayView;self.playerView.backgroundColor = [UIColor blackColor];[self.view addSubview:self.playerView];playerView.frame = self.playerView.bounds;playerView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;[self.playerView insertSubview:playerView atIndex:1];[_player setScalingMode:IJKMPMovieScalingModeAspectFill];[self installMovieNotificationObservers]; 转载自链接：https://www.jianshu.com/p/59aff611dacd","categories":[],"tags":[]},{"title":"iOS 开发中的 Bitcode","slug":"iOS 开发中的 Bitcode","date":"2019-08-12T12:53:40.000Z","updated":"2019-08-14T14:45:43.472Z","comments":true,"path":"2019/08/12/iOS 开发中的 Bitcode/","link":"","permalink":"http://yoursite.com/2019/08/12/iOS 开发中的 Bitcode/","excerpt":"","text":"Bitcode 是什么，有什么作用 Xcode 7 之后，在我们新建一个 iOS 项目时，Bitcode 选项默认是设置为 YES 的。我们可以在 ”Build Settings” -&gt; ”Enable Bitcode” 中看到这个设置项。 Apple 目前采用的编译器工具链是 LLVM，我们在编辑器中通过 C/C++/Objective-c/Swift 等语言编写的程序，通过 LLVM 编译器编译为各个芯片平台上的汇编指令，或可执行机器指令数据。而 Bitcode 则是位于编译前后之间的一种中间码。 LLVM 的编译工作原理是先把项目程序源代码翻译为 Bitcode 中间码；再根据不同目标机器芯片平台，转换为相应的汇编指令及机器码。这样的设计就让 LLVM 成为了一个编译器架构，可以轻而易举的在 LLVM 架构之上发明新的语言，以及在 LLVM 架构下支持新的 CPU 指令输出。虽然 Bitcode 仅仅只是一个中间码，不能在任何平台上运行，但它可以转化为任何被支持的 CPU 指令，包括还没被发明的 CPU。 也就是说现在打开 Bitcode 功能，提交一个 App 到 App Store。如果后面 Apple 推出了一款 CPU 全新设计的手机，在苹果后台服务器一样可以通过这个 App 的 Bitcode 编译转化为适用于新 CPU 的可执行程序，以供新手机用户下载运行这个 App。 @Onevcat 在 开发者所需要知道的 iOS 9 SDK 新特性，对 Bitcode 有这样的介绍。 给 App 瘦身的另一个手段是提交 Bitcode 给 Apple，而不是最终的二进制。Bitcode 是 LLVM 的中间码，在编译器更新时，Apple 可以用你之前提交的 Bitcode 进行优化，这样你就不必在编译器更新后再次提交你的 app，也能享受到编译器改进所带来的好处。Bitcode 支持在新项目中是默认开启的，没有特别理由的话，你也不需要将它特意关掉。 Bitcode 支持哪些平台列出 iOS、WatchOS、TVOS 及 macOS 对 Bitcode 的支持情况： 对于 iOS 平台，Bitcode 是可选的；对于 WatchOS 及 TVOS，Bitcode 是必须开启的；对于 macOS，是不支持 Bitcode 的. Bitcode 的优缺点优点 Bitcode 上传到 Apple 服务器后，Apple 为安装 App 的目标设备进行二进制优化，减少安装包的下载大小;Apple 以后如果设计了采用新指令集的新 CPU，可以继续使用同一份 Bitcode 编译出新 CPU 上执行的可执行文件，供新设备用户下载安装；缺点 使用了 Bitcode 之后，用户安装的二进制不是开发者这边生成的，而是 Apple 服务器经过优化生成的二进制，对于开发者来说，丢失了对应的调试符号信息 总结由阿里百川用户反馈模块集成遇到的一个 Bitcode 问题。单纯对于用户反馈这项功能来说，很好奇的一点是，通过手动引入 Framework 没有遇到 Bitcode 不支持的问题；而通过 Cocoapods 引入，遇到了前面提到的 Bitcode 问题。考虑到项目的后期维护性，最终选用的解决方案是，通过 Cocoapods 引入库，同时关闭 Bitcode 的支持。 转载自链接：https://github.com/JonyFang/dev-notes","categories":[],"tags":[]},{"title":"搭建iOS端视频直播系统","slug":"搭建iOS端视频直播系统","date":"2019-08-11T11:22:33.000Z","updated":"2019-08-14T14:46:06.945Z","comments":true,"path":"2019/08/11/搭建iOS端视频直播系统/","link":"","permalink":"http://yoursite.com/2019/08/11/搭建iOS端视频直播系统/","excerpt":"","text":"本文主要使用的三个技术：推流：LFLiveKit播放：ijkplayer服务器:nginx+rtmp+ffmpeg 一、推流LFLiveKit：框架支持RTMP，由Adobe公司开发。github地址https://github.com/LaiFengiOS/LFLiveKitLFLiveKit库里已经集成GPUImage框架用于美颜功能，GPUImage基于OpenGl开发，纯OC语言框架，封装好了各种滤镜同时也可以编写自定义的滤镜，其本身内置了多达125种常见的滤镜效果。 二、播放ijkplayer：是基于FFmpeg的跨平台播放器框架，由B站开发。目前已被多个主流直播App集成使用。github地址：https://github.com/Bilibili/ijkplayer 三、服务器搭建nginx+rtmp+ffmpeg：在本地搭建服务器，免去开通第三方直播的流量费用。现在我们的项目中集成了推流的所用的LFLiveKit，播放所需的ijkplayer，便可用手机做推流直播，模拟器做拉流播放。 四、总结一个完整的直播系统需要涉及到的技术主要包括以下方面：1.采集、2.滤镜处理、3.编码、4.推流、5.CDN分发、6.拉流、7.解码、8.播放、9.聊天互动。其中1～4由LFLiveKit完成（2由GPUImage完成），5就是搭建的本地服务器，6～8由ijkplayer完成。 转载自链接：https://www.jianshu.com/p/30595a5bff42","categories":[],"tags":[]}]}